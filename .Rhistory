if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("huayc09/SeuratExtend")
library(Seurat)
library(SeuratExtend)
set.seed(2025)
pbmc <- readRDS("./output/pbmc3k_final.rds")
pbmc$cluster <- Idents(pbmc)
DimPlot2(pbmc)
DimPlot2(pbmc, features = c("cluster", "orig.ident", "CD14", "CD3D"), theme = NoAxes())
DimPlot2(pbmc, features = c("cluster", "orig.ident", "CD14", "CD3D"))
DimPlot2(pbmc, features = c("CD14", "CD3D"), cols = "A")
DimPlot2(pbmc, features = c("cluster", "CD14"), split.by = "orig.ident", ncol = 1)
DimPlot2(pbmc, features = c("cluster", "CD14"), split.by = "seurat_clusters", ncol = 1)
DimPlot2(pbmc, features = c("cluster", "CD14"), split.by = "orig.ident", ncol = 1)
b_cells <- colnames(pbmc)[pbmc$cluster == "B cell"]
DimPlot2(pbmc, cells.highlight = b_cells)
b_cells <- colnames(pbmc)[pbmc$cluster == "B"]
DimPlot2(pbmc, cells.highlight = b_cells)
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
cols = list(
"cluster" = "default", # dark theme
"CD14" = "D",
"CD3D" = "OrRd"
))
DimPlot2(pbmc, label = TRUE, box = TRUE, label.color = "black", repel = TRUE, theme = NoLegend())
DimPlot2(pbmc, index.title = "C", box = TRUE, label.color = "black")
# Add simplified axis indicators
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = NoAxes()
) + theme_umap_arrows()
# Add arrows to each subplot
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = theme_umap_arrows()
)
FeaturePlot3(pbmc, color = "ryb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 0.5)
FeaturePlot3(pbmc, color = "rgb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 1)
FeaturePlot3(
pbmc,
color = "rgb",
feature.1 = "CD3D",
feature.2 = "CD14",
feature.3 = "CD79A",
pt.size = 1,
dark.theme = TRUE
)
FeaturePlot3.grid(pbmc, features = c("CD3D", "CD14", "CD79A", "FCGR3A", NA, "LYZ"), pt.size = 0.5)
DefaultAssay(pbmc) <- "RNA"
genes <- c("CD3D", "CD14", "CD79A", "FCGR3A", "LYZ")
setdiff(genes, rownames(pbmc))  # should print character(0)
FeaturePlot3.grid(pbmc, features = c("CD3D", "CD14", "CD79A", "FCGR3A", NA, "LYZ"), pt.size = 0.5)
FeaturePlot3.grid(pbmc, features = c("CD3D", "CD14", "CD79A", "FCGR3A", NA_character_, "LYZ"), pt.size = 0.5)
FeaturePlot3.grid(pbmc, features = c("CD3D", "CD14", "CD79A", "FCGR3A", "LYZ"), pt.size = 0.5)
library(Seurat)
library(SeuratExtend)
set.seed(2025)
pbmc <- readRDS("./output/pbmc3k_final.rds")
pbmc$cluster <- Idents(pbmc)
DimPlot2(pbmc)
DimPlot2(pbmc, features = c("cluster", "orig.ident", "CD14", "CD3D"))
DimPlot2(pbmc, features = c("CD14", "CD3D"), cols = "A")
DimPlot2(pbmc, features = c("cluster", "CD14"), split.by = "orig.ident", ncol = 1)
b_cells <- colnames(pbmc)[pbmc$cluster == "B"]
DimPlot2(pbmc, cells.highlight = b_cells)
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
cols = list(
"cluster" = "default", # dark theme
"CD14" = "D",
"CD3D" = "OrRd"
))
DimPlot2(pbmc, label = TRUE, box = TRUE, label.color = "black", repel = TRUE, theme = NoLegend())
DimPlot2(pbmc, index.title = "C", box = TRUE, label.color = "black")
# Add simplified axis indicators
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = NoAxes()
) + theme_umap_arrows()
# Add arrows to each subplot
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = theme_umap_arrows()
)
FeaturePlot3(pbmc, color = "ryb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 0.5)
FeaturePlot3(pbmc, color = "rgb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 1)
FeaturePlot3(
pbmc,
color = "rgb",
feature.1 = "CD3D",
feature.2 = "CD14",
feature.3 = "CD79A",
pt.size = 1,
dark.theme = TRUE
)
DefaultAssay(pbmc) <- "RNA"
genes <- c("CD3D", "CD14", "CD79A", "FCGR3A", "LYZ")
setdiff(genes, rownames(pbmc))  # should print character(0)
FeaturePlot3.grid(pbmc, features = c("CD3D", "CD14", "CD79A", "FCGR3A", "LYZ"), pt.size = 0.5)
FeaturePlot3.grid(pbmc, features = c("CD3D", "CD14", "CD79A", "FCGR3A", NA_character_, "LYZ"), pt.size = 0.5)
DefaultAssay(pbmc)
sapply(c("CD3D","CD14","CD79A","FCGR3A","LYZ"), \(g) g %in% rownames(pbmc))
sessionInfo()$otherPkgs[c("Seurat","SeuratObject","SeuratExtend")]
FeaturePlot3.grid(
pbmc,
features = c("CD3D", "CD14", "CD79A", "FCGR3A", NA_character_, "LYZ"),
pt.size = 0.5
)
FeaturePlot3.grid(pbmc, features = c("CD3D", "CD14", "CD79A", "FCGR3A", NA, "LYZ"), color = "rgb", pt.size = 1)
FeaturePlot3.grid(
pbmc,
features = c("CD3D", "CD14", "CD79A", "FCGR3A", "CD14", "LYZ"),
pt.size = 0.5
)
FeaturePlot3.grid(
pbmc,
features = c("CD3D", "CD14", "CD79A",   # panel 1
"FCGR3A", "LYZ", "NKG7"),  # panel 2 (added a 6th gene)
color = "ryb",
pt.size = 0.5
)
p1 <- FeaturePlot3(pbmc, feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A",
color = "ryb", pt.size = 0.5)
# “Skip” a channel by duplicating one gene (keeps 3 channels consistent)
p2 <- FeaturePlot3(pbmc, feature.1 = "FCGR3A", feature.2 = "LYZ", feature.3 = "LYZ",
color = "ryb", pt.size = 0.5)
DefaultAssay(pbmc)
setdiff(c("CD3D","CD14","CD79A","FCGR3A","LYZ","NKG7"), rownames(pbmc))
install.packages(c("openssl", "rstanarm", "speedglm", "systemfonts"))
create_condaenv_seuratextend()
library(Seurat)
library(SeuratExtend)
set.seed(2025)
create_condaenv_seuratextend()
library(Seurat)
library(SeuratExtend)
set.seed(2025)
pbmc <- readRDS("./output/pbmc3k_final.rds")
pbmc$cluster <- Idents(pbmc)
DimPlot2(pbmc)
library(Seurat)
library(SeuratExtend)
set.seed(2025)
pbmc <- readRDS("./output/pbmc3k_final.rds")
pbmc$cluster <- Idents(pbmc)
# Visualizing cell clusters using DimPlot2
DimPlot2(pbmc, theme = theme_umap_arrows())
colnames(pbmc@meta.data)
summary(pbmc$cluster)
# Cluster distribution bar plot
ClusterDistrBar(pbmc$orig.ident, pbmc$cluster)
# Calculating z-scores for variable features
genes.zscore <- CalcStats(
pbmc,
features = VariableFeatures(pbmc),
group.by = "cluster",
order = "p",
n = 4)
# Displaying heatmap
Heatmap(genes.zscore, lab_fill = "zscore")
# Create grouped features
grouped_features <- list(
"B_cell_markers" = c("MS4A1", "CD79A"),
"T_cell_markers" = c("CD3D", "CD8A", "IL7R"),
"Myeloid_markers" = c("CD14", "FCGR3A", "S100A8")
)
DotPlot2(pbmc, features = grouped_features)
levels(Idents(pbmc))
# Specifying genes and cells of interest
genes <- c("CD3D", "CD14", "CD79A")
cells <- WhichCells(pbmc, idents = c("B", "CD8 T", "CD14+ Mono"))
# Violin plot with statistical analysis
VlnPlot2(
pbmc,
features = genes,
group.by = "cluster",
cells = cells,
stat.method = "wilcox.test")
FeaturePlot3(pbmc, feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 1)
VolcanoPlot(pbmc,
ident.1 = "B",
ident.2 = "CD8 T")
options(spe = "human")
pbmc <- GeneSetAnalysisGO(pbmc, parent = "immune_system_process", n.min = 5)
matr <- RenameGO(pbmc@misc$AUCell$GO$immune_system_process)
go_zscore <- CalcStats(
matr,
f = pbmc$cluster,
order = "p",
n = 3)
Heatmap(go_zscore, lab_fill = "zscore")
GSEAplot(
pbmc,
ident.1 = "B",
ident.2 = "CD8 T",
title = "GO:0042113 B cell activation (335g)",
geneset = GO_Data$human$GO2Gene[["GO:0042113"]])
# Downloading a pre-computed SCENIC loom file
scenic_loom_path <- file.path(tempdir(), "pyscenic_integrated-output.loom")
download.file("https://zenodo.org/records/10944066/files/pbmc3k_small_pyscenic_integrated-output.loom", scenic_loom_path, mode = "wb")
# Importing SCENIC Loom Files into Seurat
pbmc <- ImportPyscenicLoom(scenic_loom_path, seu = pbmc)
# Visualizing variables such as cluster, gene expression, and SCENIC regulon activity with customized colors
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CEBPA", "tf_CEBPA"),
cols = list("tf_CEBPA" = "OrRd"),
theme = NoAxes()
) + theme_umap_arrows()
# Download the example Seurat Object with myeloid cells
mye_small <- readRDS(url("https://zenodo.org/records/10944066/files/pbmc10k_mye_small_velocyto.rds", "rb"))
# Compute diffusion map
mye_small <- Palantir.RunDM(mye_small, n_components = 20)
# Visualize the first two diffusion map dimensions
DimPlot2(mye_small, reduction = "ms")
library(Seurat)
library(SeuratExtend)
# Download the example Seurat Object
mye_small <- readRDS(url("https://zenodo.org/records/10944066/files/pbmc10k_mye_small_velocyto.rds", "rb"))
# Download the example velocyto loom file
loom_path <- file.path(tempdir(), "pbmc10k_mye_small.loom")
download.file("https://zenodo.org/records/10944066/files/pbmc10k_mye_small.loom",
loom_path,
mode = "wb")  # Use binary mode for Windows compatibility
# Set up the path for saving the AnnData object in the HDF5 (h5ad) format
if (.Platform$OS.type == "windows") {
adata_path <- normalizePath(file.path(tempdir(), "mye_small.h5ad"), winslash = "/")
} else {
adata_path <- file.path(tempdir(), "mye_small.h5ad")
}
# Integrate Seurat Object and velocyto loom information into one AnnData object.
# This object will be stored at the specified path.
scVelo.SeuratToAnndata(
mye_small, # The downloaded example Seurat object
filename = adata_path, # Path where the AnnData object will be saved
velocyto.loompath = loom_path, # Path to the loom file
prefix = "sample1_", # Prefix for cell IDs in the Seurat object
postfix = "-1" # Postfix for cell IDs in the Seurat object
)
