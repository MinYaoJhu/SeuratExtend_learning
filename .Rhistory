pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
cols = list(
"cluster" = "default", # dark theme
"CD14" = "D",
"CD3D" = "OrRd"
))
DimPlot2(pbmc, label = TRUE, box = TRUE, label.color = "black", repel = TRUE, theme = NoLegend())
DimPlot2(pbmc, index.title = "C", box = TRUE, label.color = "black")
# Add simplified axis indicators
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = NoAxes()
) + theme_umap_arrows()
# Add arrows to each subplot
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = theme_umap_arrows()
)
FeaturePlot3(pbmc, color = "ryb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 0.5)
FeaturePlot3(pbmc, color = "rgb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 1)
FeaturePlot3(
pbmc,
color = "rgb",
feature.1 = "CD3D",
feature.2 = "CD14",
feature.3 = "CD79A",
pt.size = 1,
dark.theme = TRUE
)
DefaultAssay(pbmc) <- "RNA"
genes <- c("CD3D", "CD14", "CD79A", "FCGR3A", "LYZ")
setdiff(genes, rownames(pbmc))  # should print character(0)
DefaultAssay(pbmc)
sapply(c("CD3D","CD14","CD79A","FCGR3A","LYZ"), \(g) g %in% rownames(pbmc))
sessionInfo()$otherPkgs[c("Seurat","SeuratObject","SeuratExtend")]
DefaultAssay(pbmc)
setdiff(c("CD3D","CD14","CD79A","FCGR3A","LYZ","NKG7"), rownames(pbmc))
p1 <- FeaturePlot3(pbmc, feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A",
color = "ryb", pt.size = 0.5)
# “Skip” a channel by duplicating one gene (keeps 3 channels consistent)
p2 <- FeaturePlot3(pbmc, feature.1 = "FCGR3A", feature.2 = "LYZ", feature.3 = "LYZ",
color = "ryb", pt.size = 0.5)
library(SeuratExtend)
mye_small <- RunSlingshot(mye_small, group.by = "cluster", start.clus = "Mono CD14")
gc()
library(Seurat)
library(SeuratExtend)
# Download the example Seurat Object
mye_small <- readRDS(url("https://zenodo.org/records/10944066/files/pbmc10k_mye_small_velocyto.rds", "rb"))
# Download the example velocyto loom file
loom_path <- file.path(tempdir(), "pbmc10k_mye_small.loom")
download.file("https://zenodo.org/records/10944066/files/pbmc10k_mye_small.loom",
loom_path,
mode = "wb")  # Use binary mode for Windows compatibility
# Set up the path for saving the AnnData object in the HDF5 (h5ad) format
if (.Platform$OS.type == "windows") {
adata_path <- normalizePath(file.path(tempdir(), "mye_small.h5ad"), winslash = "/")
} else {
adata_path <- file.path(tempdir(), "mye_small.h5ad")
}
# Integrate Seurat Object and velocyto loom information into one AnnData object.
# This object will be stored at the specified path.
scVelo.SeuratToAnndata(
mye_small, # The downloaded example Seurat object
filename = adata_path, # Path where the AnnData object will be saved
velocyto.loompath = loom_path, # Path to the loom file
prefix = "sample1_", # Prefix for cell IDs in the Seurat object
postfix = "-1" # Postfix for cell IDs in the Seurat object
)
mye_small <- Palantir.RunDM(mye_small)
# View the new dimensional reductions "dm" and "ms" in the Seurat Object:
mye_small@reductions
# View the first 2 ms dimensions:
DimPlot2(mye_small, reduction = "ms", group.by = "cluster", label = TRUE)
mye_small <- Palantir.Pseudotime(mye_small, start_cell = "sample1_GAGAGGTAGCAGTACG-1")
ps <- mye_small@misc$Palantir$Pseudotime
head(ps)
# Visualize cell fate on UMAP
colnames(ps)[3:4] <- c("fate1", "fate2")
mye_small@meta.data[,colnames(ps)] <- ps
DimPlot2(mye_small, features = colnames(ps), reduction = "ms",
cols = list(continuous = "A", Entropy = "D"), theme = NoAxes())
mye_small <- Palantir.Magic(mye_small)
# Creates a new assay "magic" in the Seurat object
mye_small <- NormalizeData(mye_small)
DimPlot2(mye_small, features = c("CD14", "magic_CD14", "FLT3", "magic_FLT3"),
cols = "A", theme = NoAxes())
adata.AddMetadata(mye_small, col = colnames(ps))
library(SeuratExtend)
# Basic gene trend curve visualization
GeneTrendCurve.Palantir(mye_small, features = c("CD14", "FCGR3A"))
# Accessing pseudotime and adjusting fate names
ps <- mye_small@misc$Palantir$Pseudotime
head(ps)
colnames(ps)[3:4] <- c("fate1", "fate2")
# Customized gene trend curve visualization
GeneTrendCurve.Palantir(
mye_small,
pseudotime.data = ps,
features = c("CD14", "FCGR3A"),
point = TRUE,
se = FALSE
)
# Creating a gene trend heatmap
GeneTrendHeatmap.Palantir(
mye_small,
features = c("CD14", VariableFeatures(mye_small)[1:10]),
pseudotime.data = ps,
magic = FALSE,
lineage = "fate1"
)
library(SeuratExtend)
mye_small <- RunSlingshot(mye_small, group.by = "cluster", start.clus = "Mono CD14")
sling <- mye_small@misc$slingshot$PCA$SlingPseudotime
head(sling)
mye_small@meta.data[,colnames(sling)] <- as.data.frame(sling)
DimPlot2(mye_small, features = colnames(sling), cols = "C", theme = NoAxes())
GeneTrendCurve.Slingshot(mye_small, features = c("CD14", "FCGR3A"))
GeneTrendHeatmap.Slingshot(
mye_small,
features = c("CD14", VariableFeatures(mye_small)[1:10]),
lineage = "slingPseudotime_2"
)
# Convert Seurat object to loom file and save it locally
pbmc_loom_path <- file.path(tempdir(), "pbmc3k_small.loom")
Seu2Loom(pbmc, filename = pbmc_loom_path, add.normdata = TRUE)
# Load the loom file into an AnnData object
adata.LoadLoom(loompath = pbmc_loom_path)
# Print the AnnData object details
py_run_string("print(adata)")
# Add dimension reduction data from Seurat to AnnData
adata.AddDR(pbmc)
# Directly convert Seurat object to AnnData object
Seu2Adata(pbmc)
# Add new metadata column to AnnData
pbmc$cluster2 <- pbmc$cluster
adata.AddMetadata(pbmc, col = "cluster2")
# Convert Seurat object to loom file and save it locally
pbmc_loom_path <- file.path(tempdir(), "pbmc3k_small.loom")
Seu2Loom(pbmc, filename = pbmc_loom_path, add.normdata = TRUE)
# Convert Seurat object to loom file and save it locally
pbmc_loom_path <- file.path("D:/Oldroyd_lab/GitHub/SeuratExtend_learning/output/pbmc3k_small.loom")
Seu2Loom(pbmc, filename = pbmc_loom_path, add.normdata = TRUE)
# Load the loom file into an AnnData object
adata.LoadLoom(loompath = pbmc_loom_path)
# Print the AnnData object details
py_run_string("print(adata)")
# Add dimension reduction data from Seurat to AnnData
adata.AddDR(pbmc)
# Print the updated AnnData object
py_run_string("print(adata)")
# Directly convert Seurat object to AnnData object
Seu2Adata(pbmc)
# Load the loom file into an AnnData object
adata.LoadLoom(loompath = pbmc_loom_path)
# Print the AnnData object details
py_run_string("print(adata)")
# Add dimension reduction data from Seurat to AnnData
adata.AddDR(pbmc)
# Print the updated AnnData object
py_run_string("print(adata)")
# Directly convert Seurat object to AnnData object
Seu2Adata(pbmc)
# Directly convert Seurat object to AnnData object
Seu2Adata(pbmc, filename = pbmc_loom_path, add.normdata = TRUE)
# Directly convert Seurat object to AnnData object
Seu2Adata(pbmc, filename = pbmc_loom_path, add.normdata = TRUE)
# Add new metadata column to AnnData
pbmc$cluster2 <- pbmc$cluster
adata.AddMetadata(pbmc, col = "cluster2")
# Print the updated AnnData object
py_run_string("print(adata)")
# Directly convert Seurat object to AnnData object
Seu2Adata(pbmc)
# Save the AnnData object to a local file
pbmc_adata_path <- file.path(tempdir(), "pbmc3k_small.h5ad")
adata.Save(pbmc_adata_path)
# Load an existing AnnData object from file
adata.Load(pbmc_adata_path)
# Save the AnnData object to a local file
pbmc_adata_path <- file.path("D:/Oldroyd_lab/GitHub/SeuratExtend_learning/output/pbmc3k_small.h5ad")
adata.Save(pbmc_adata_path)
# Load an existing AnnData object from file
adata.Load(pbmc_adata_path)
# Load the scVelo tutorial results and generate a plot
adata.Load(adata_path)
scVelo.Plot(color = "cluster", figsize = c(5,4), save = "umap4_load_adata.png")
sessionInfo()
library(Seurat)
library(SeuratExtend)
set.seed(2025)
pbmc <- readRDS("./output/pbmc3k_final.rds")
pbmc$cluster <- Idents(pbmc)
DimPlot2(pbmc)
DimPlot2(pbmc, features = c("cluster", "orig.ident", "CD14", "CD3D"))
DimPlot2(pbmc, features = c("CD14", "CD3D"), cols = "A")
DimPlot2(pbmc, features = c("cluster", "CD14"), split.by = "orig.ident", ncol = 1)
b_cells <- colnames(pbmc)[pbmc$cluster == "B"]
DimPlot2(pbmc, cells.highlight = b_cells)
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
cols = list(
"cluster" = "default", # dark theme
"CD14" = "D",
"CD3D" = "OrRd"
))
DimPlot2(pbmc, label = TRUE, box = TRUE, label.color = "black", repel = TRUE, theme = NoLegend())
DimPlot2(pbmc, index.title = "C", box = TRUE, label.color = "black")
# Add simplified axis indicators
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = NoAxes()
) + theme_umap_arrows()
# Add arrows to each subplot
DimPlot2(
pbmc,
features = c("cluster", "orig.ident", "CD14", "CD3D"),
theme = theme_umap_arrows()
)
FeaturePlot3(pbmc, color = "ryb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 0.5)
FeaturePlot3(pbmc, color = "rgb", feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A", pt.size = 1)
FeaturePlot3(
pbmc,
color = "rgb",
feature.1 = "CD3D",
feature.2 = "CD14",
feature.3 = "CD79A",
pt.size = 1,
dark.theme = TRUE
)
DefaultAssay(pbmc) <- "RNA"
genes <- c("CD3D", "CD14", "CD79A", "FCGR3A", "LYZ")
setdiff(genes, rownames(pbmc))  # should print character(0)
DefaultAssay(pbmc)
sapply(c("CD3D","CD14","CD79A","FCGR3A","LYZ"), \(g) g %in% rownames(pbmc))
sessionInfo()$otherPkgs[c("Seurat","SeuratObject","SeuratExtend")]
DefaultAssay(pbmc)
setdiff(c("CD3D","CD14","CD79A","FCGR3A","LYZ","NKG7"), rownames(pbmc))
p1 <- FeaturePlot3(pbmc, feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A",
color = "ryb", pt.size = 0.5)
# “Skip” a channel by duplicating one gene (keeps 3 channels consistent)
p2 <- FeaturePlot3(pbmc, feature.1 = "FCGR3A", feature.2 = "LYZ", feature.3 = "LYZ",
color = "ryb", pt.size = 0.5)
FeaturePlot3.grid(
pbmc,
features = c("CD3D", "CD14", "CD79A", "FCGR3A", NA, "LYZ"),
color = "rgb",
pt.size = 1,
dark.theme = TRUE,
legend = TRUE
)
# Create a basic heatmap
Heatmap(toplot, lab_fill = "zscore")
# Calculate z-scores for variable features
genes <- VariableFeatures(pbmc)
toplot <- CalcStats(pbmc, features = genes, method = "zscore", order = "p", n = 5)
# Create a basic heatmap
Heatmap(toplot, lab_fill = "zscore")
# Viridis-A theme
Heatmap(toplot, lab_fill = "zscore", color_scheme = "A")
# White - blue - dark green
Heatmap(toplot, lab_fill = "zscore", color_scheme = "BuGn")
gene_groups <- sample(c("group1", "group2", "group3"), nrow(toplot2), replace = TRUE)
Heatmap(toplot2, lab_fill = "zscore", facet_row = gene_groups) +
theme(axis.text.y = element_blank())
toplot2 <- CalcStats(pbmc, features = genes[1:500], method = "zscore", order = "p")
Heatmap(toplot2, lab_fill = "zscore", feature_text_subset = genes[1:20], expand_limits_x = c(-0.5, 11))
gene_groups <- sample(c("group1", "group2", "group3"), nrow(toplot2), replace = TRUE)
Heatmap(toplot2, lab_fill = "zscore", facet_row = gene_groups) +
theme(axis.text.y = element_blank())
genes
# Select some variable features
genes <- VariableFeatures(pbmc)[1:10]
DotPlot2(pbmc, features = genes)
genes
# Select some variable features
genes <- VariableFeatures(pbmc)[1:10]
DotPlot2(pbmc, features = genes)
# Create grouped features
grouped_features <- list(
"B_cell_markers" = c("MS4A1", "CD79A"),
"T_cell_markers" = c("CD3D", "CD8A", "IL7R"),
"Myeloid_markers" = c("CD14", "FCGR3A", "S100A8")
)
DotPlot2(pbmc, features = grouped_features)
grouped_features
# Select some variable features
genes <- VariableFeatures(pbmc)[1:10]
genes
DotPlot2(pbmc, features = genes)
# Create grouped features
grouped_features <- list(
"B_cell_markers" = c("MS4A1", "CD79A"),
"T_cell_markers" = c("CD3D", "CD8A", "IL7R"),
"Myeloid_markers" = c("CD14", "FCGR3A", "S100A8")
)
grouped_features
DotPlot2(pbmc, features = grouped_features)
# Basic split visualization
DotPlot2(pbmc, features = genes, group.by = "cluster", split.by = "orig.ident", show_grid = FALSE)
# Basic split visualization
DotPlot2(
pbmc,
features = genes,
group.by = "cluster",
split.by = "orig.ident",
show_grid = FALSE
)
# Using colors instead of borders for split groups
DotPlot2(pbmc,
features = genes,
group.by = "cluster",
split.by = "orig.ident",
split.by.method = "color",
show_grid = FALSE)
DotPlot2(
pbmc,
features = grouped_features,
color_scheme = "BuRd",
border = FALSE,
# Remove dot borders
show_grid = FALSE,
# Remove grid lines
flip = TRUE
)          # Flip coordinates
library(Seurat)
library(SeuratExtend)
genes <- c("CD3D","CD14","CD79A")
VlnPlot2(pbmc, features = genes, ncol = 1)
VlnPlot2(pbmc, features = genes, violin = FALSE, pt.style = "quasirandom", ncol = 1)
VlnPlot2(pbmc, features = genes, pt = FALSE, ncol = 1)
VlnPlot2(pbmc, features = genes, pt = FALSE, hide.outlier = TRUE, ncol = 1)
VlnPlot2(pbmc, features = genes, style = "outline", ncol = 1)
lowExprGenes <- c("CCR7", "IL7R", "TCF7")
VlnPlot2(pbmc,
features = lowExprGenes,
show.mean = TRUE,      # Show mean and median lines
mean_colors = c("red", "blue"),  # Colors for mean and median
cols = "light",        # Light color scheme for better visibility
ncol = 1)
VlnPlot2(pbmc, features = genes, group.by = "cluster", split.by = "orig.ident")
cells <- colnames(pbmc)[pbmc$cluster %in% c("B", "CD14+ Mono", "CD8 T")]
VlnPlot2(pbmc, features = genes, group.by = "cluster", cells = cells)
VlnPlot2(
pbmc,
features = genes,
group.by = "cluster",
cells = cells,
stat.method = "wilcox.test",
hide.ns = TRUE
)
VlnPlot2(
pbmc,
features = genes,
group.by = "cluster",
cells = cells,
stat.method = "t.test",
comparisons = list(c(1, 2), c(1, 3)),
hide.ns = FALSE
)
# Perform gene set analysis
pbmc <- GeneSetAnalysis(pbmc, genesets = hall50$human)
matr <- pbmc@misc$AUCell$genesets
# Plot the first three pathways
VlnPlot2(matr[1:3, ], f = pbmc$cluster, ncol = 1)
ClusterDistrBar(origin = pbmc$orig.ident, cluster = pbmc$cluster)
ClusterDistrBar(
origin = pbmc$orig.ident,
cluster = pbmc$cluster,
percent = FALSE
)
ClusterDistrBar(
origin = pbmc$orig.ident,
cluster = pbmc$cluster,
flip = FALSE,
reverse_order = FALSE
)
ClusterDistrBar(
origin = pbmc$orig.ident,
cluster = pbmc$cluster,
flip = FALSE,
stack = FALSE
)
pbmc <- GeneSetAnalysis(pbmc, genesets = hall50$human)
matr <- pbmc@misc$AUCell$genesets
WaterfallPlot(matr, f = pbmc$cluster, ident.1 = "CD14+ Mono", ident.2 = "CD8 T")
# Create a plot using the new segment style
WaterfallPlot(
matr,
f = pbmc$cluster,
ident.1 = "CD14+ Mono",
ident.2 = "CD8 T",
style = "segment",
color_theme = "D"
)
str(matr)
head(matr)
str(matr)
head(matr)
str(matr)
summary(matr)
str(matr)
WaterfallPlot(
matr,
f = pbmc$cluster,
ident.1 = "CD14+ Mono",
ident.2 = "CD8 T",
len.threshold = 2)
genes <- VariableFeatures(pbmc)[1:80]
WaterfallPlot(
pbmc,
group.by = "cluster",
features = genes,
ident.1 = "CD14+ Mono",
ident.2 = "CD8 T",
length = "logFC")
genes <- VariableFeatures(pbmc)[1:80]
WaterfallPlot(
pbmc,
group.by = "cluster",
features = genes,
ident.1 = "CD14+ Mono",
ident.2 = "CD8 T",
length = "logFC")
WaterfallPlot(
pbmc,
group.by = "cluster",
features = genes,
ident.1 = "CD14+ Mono",
ident.2 = "CD8 T",
length = "logFC",
top.n = 20)
# Using log base 2 for fold change calculations
WaterfallPlot(
pbmc,
group.by = "cluster",
features = genes,
ident.1 = "CD14+ Mono",
ident.2 = "CD8 T",
length = "logFC",
log.base = "2",    # Use log2 instead of natural log
top.n = 20)
VolcanoPlot(pbmc,
ident.1 = "B",
ident.2 = "CD8 T")
VolcanoPlot(
pbmc,
ident.1 = "B",
ident.2 = "CD8 T",
x.threshold = 0.5,    # Log fold change threshold
y.threshold = 2     # -log10(p-value) threshold
)
VolcanoPlot(
pbmc,
ident.1 = "B",
ident.2 = "CD8 T",
x.quantile = 0.99,    # Less stringent x threshold
y.quantile = 0.95,    # More stringent y threshold
top.n = 5,            # Label fewer genes
color = c("grey20", "grey70", "darkred")  # Custom colors
)
VolcanoPlot(
pbmc,
ident.1 = "B",
ident.2 = "CD8 T",
y = "tscore"
)
p1 <- FeaturePlot3(pbmc, feature.1 = "CD3D", feature.2 = "CD14", feature.3 = "CD79A",
color = "ryb", pt.size = 0.5)
p2 <- FeaturePlot3(pbmc, feature.1 = "FCGR3A", feature.2 = "LYZ", feature.3 = "RPLP0",
color = "ryb", pt.size = 0.5)
p1 + p2 # patchwork
FeaturePlot3.grid(
pbmc,
features = c("CD3D", "CD14", "CD79A", "FCGR3A", "RPLP0", "LYZ"),
color = "rgb",
pt.size = 1,
dark.theme = TRUE,
legend = TRUE
)
FeaturePlot3.grid(
pbmc,
features = c("CD3D","CD14","CD79A",   # panel 1
"FCGR3A","LYZ","RPLP0"), # panel 2 (unique 3rd)
color = "rgb",
pt.size = 0.5
)
library(patchwork)
library(grid)    # for unit()
# collect legends, move to bottom, add margins, prevent clipping
(p1 + p2) +
plot_layout(guides = "collect") &
theme(
legend.position = "bottom",
legend.justification = c(0.5, 0),
legend.box.margin = margin(t = 4, r = 20, b = 12, l = 20),
legend.key.width  = unit(12, "mm"),
legend.key.height = unit(4,  "mm"),
plot.margin = margin(t = 10, r = 30, b = 30, l = 10)
) &
coord_cartesian(clip = "off")
VolcanoPlot(
pbmc,
ident.1 = "B",
ident.2 = "CD8 T",
log.base = "2"    # Use log2 instead of natural log
)
